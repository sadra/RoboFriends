{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","borderTop","height","paddingTop","children","ErrorBoundry","hasError","this","setState","Component","App","onRequestRobots","onSearchChanged","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9e91278.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nfunction Card(props) {\n  const { id, name, email } = props;\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot) => {\n        return (\n          <Card\n            key={robot.id}\n            id={robot.id}\n            name={robot.name}\n            email={robot.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robot'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        borderTop: '3px solid black',\n        height: '500px',\n        paddingTop: '10px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h2>Oh, we has Error</h2>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChanged, robots, isPending } = this.props;\n\n    if (isPending) {\n      return (\n        <div className='tc'>\n          <p>Loading ...</p>\n        </div>\n      );\n    }\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className='tc'>\n        <h1 className='f1'>Robo Friends</h1>\n        <SearchBox searchChange={onSearchChanged} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChanged: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots } from './reducer';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}